{"version":3,"sources":["images/loader-doubl.svg","components/Loader/loader-home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LoaderHome","react_default","a","createElement","Grid","Column","width","className","Segment","basic","padded","textAlign","Image","alt","centered","size","src","loader","React","PureComponent","HomepageLoadable","Loadable","Promise","all","e","then","bind","loading","loader_home_LoaderHome","PaymentLoadable","TransactionsLoadable","VerifyLoadable","ErrorLoadable","App","react_router_dom","basename","react_router","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gXCKnBC,2LAGjB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAKC,OAAN,CAAaC,MAAO,GAAIC,UAAW,eACjCN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,OAAK,EACLC,OAAQ,OACRC,UAAW,UAEXV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEC,IAAK,eACLC,UAAQ,EACRC,KAAM,QACNC,IAAKC,eAduBC,IAAMC,gBCQxCC,EAAmBC,IAAS,CAChCJ,OAAQ,kBAAMK,QAAAC,IAAA,CAAAzB,EAAA0B,EAAA,GAAA1B,EAAA0B,EAAA,GAAA1B,EAAA0B,EAAA,KAAAC,KAAA3B,EAAA4B,KAAA,YACdC,QAFgC,WAG9B,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,SAILC,EAAkBR,IAAS,CAC/BJ,OAAQ,kBAAMK,QAAAC,IAAA,CAAAzB,EAAA0B,EAAA,GAAA1B,EAAA0B,EAAA,GAAA1B,EAAA0B,EAAA,GAAA1B,EAAA0B,EAAA,MAAAC,KAAA3B,EAAA4B,KAAA,YACdC,QAF+B,WAG7B,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,SAILE,EAAuBT,IAAS,CACpCJ,OAAQ,kBAAMK,QAAAC,IAAA,CAAAzB,EAAA0B,EAAA,GAAA1B,EAAA0B,EAAA,MAAAC,KAAA3B,EAAA4B,KAAA,YACdC,QAFoC,WAGlC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,SAILG,EAAiBV,IAAS,CAC9BJ,OAAQ,kBAAMnB,EAAA0B,EAAA,GAAAC,KAAA3B,EAAA4B,KAAA,YACdC,QAF8B,WAG5B,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,SAILI,EAAgBX,IAAS,CAC7BJ,OAAQ,kBAAMK,QAAAC,IAAA,CAAAzB,EAAA0B,EAAA,IAAA1B,EAAA0B,EAAA,KAAAC,KAAA3B,EAAA4B,KAAA,YACdC,QAF6B,WAG3B,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,SA2BIK,mLAnBX,OACEhC,EAAAC,EAAAC,cAAA,OAAKI,UAAW,QAEdN,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAQC,SAAU,KAChBlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACEnC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAWnB,IACnCnB,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOE,KAAM,0BAA2BC,UAAWV,IACnD5B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOE,KAAM,WAAYC,UAAWV,IACpC5B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOE,KAAM,gBAAiBC,UAAWT,IACzC7B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOE,KAAM,qBAAsBC,UAAWR,IAC9C9B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOG,UAAWP,cAfZQ,aCnCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.db678b43.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader-doubl.35762e6b.svg\";","import React from 'react'\nimport { Grid, Image, Segment } from 'semantic-ui-react'\nimport loader from '../../images/loader-doubl.svg'\nimport './loader.scss'\n\nexport default class LoaderHome extends React.PureComponent {\n  render () {\n    \n    return (\n      <Grid.Column width={16} className={'loader-home'}>\n        <Segment\n          basic\n          padded={'very'}\n          textAlign={'center'}\n        >\n          <Image\n            alt={'Loader image'}\n            centered\n            size={'small'}\n            src={loader}\n          />\n\n        </Segment>\n      </Grid.Column>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.scss'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport 'semantic-ui-css/semantic.min.css'\n// import Homepage from './components/Homepage/homepage'\n// import Payment from './components/Payment/payment'\n// import ErrorPage from './components/ErrorPage/errorpage'\n// import Transactions from './components/Transactions/transactions'\n// import VerifyPage from './components/VerifyPage/verifypage'\nimport Loadable from 'react-loadable';\nimport LoaderHome from './components/Loader/loader-home'\n// import Loader from './components/Loader/loader'\n\nconst HomepageLoadable = Loadable({\n  loader: () => import('./components/Homepage/homepage'),\n  loading() {\n    return <LoaderHome />\n  }\n});\n\nconst PaymentLoadable = Loadable({\n  loader: () => import('./components/Payment/payment'),\n  loading() {\n    return <LoaderHome />\n  }\n});\n\nconst TransactionsLoadable = Loadable({\n  loader: () => import('./components/Transactions/transactions'),\n  loading() {\n    return <LoaderHome />\n  }\n});\n\nconst VerifyLoadable = Loadable({\n  loader: () => import('./components/VerifyPage/verifypage'),\n  loading() {\n    return <LoaderHome />\n  }\n});\n\nconst ErrorLoadable = Loadable({\n  loader: () => import('./components/ErrorPage/errorpage'),\n  loading() {\n    return <LoaderHome />\n  }\n});\nclass App extends Component {\n\n \n  render () {\n    \n    return (\n      <div className={'body'}>\n\n        <Router basename={'/'}>\n          <Switch>\n            <Route exact path={'/'} component={HomepageLoadable} />\n            <Route path={'/payment/:activePackage'} component={PaymentLoadable} />\n            <Route path={'/payment'} component={PaymentLoadable} />\n            <Route path={'/transactions'} component={TransactionsLoadable} />\n            <Route path={'/verify/:reference'} component={VerifyLoadable} />\n            <Route component={ErrorLoadable} />\n          </Switch>\n        </Router>\n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}