{"version":3,"sources":["../node_modules/lodash/map.js","../node_modules/lodash/_baseMap.js","components/Transactions/transactions.jsx"],"names":["arrayMap","__webpack_require__","baseIteratee","baseMap","isArray","module","exports","collection","iteratee","baseEach","isArrayLike","index","result","Array","length","value","key","Transactions","props","_this","Object","_home_deolaj_Desktop_firstresumeaid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_deolaj_Desktop_firstresumeaid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_deolaj_Desktop_firstresumeaid_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","getTransactions","axios","get","then","response","console","log","transactions","data","success","i","status","push","metadata","custom_fields","first_name","setState","catch","error","state","mobile","document","querySelector","clientWidth","_this$state","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","semantic_ui_react__WEBPACK_IMPORTED_MODULE_6__","className","Column","width","semantic_ui_react__WEBPACK_IMPORTED_MODULE_7__","Header","Row","HeaderCell","Body","map","transaction","id","Cell","paid_at","customer","email","reference","currency","amount","Component"],"mappings":"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","file":"static/js/11.396a90c8.chunk.js","sourcesContent":["var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    isArray = require('./isArray');\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\n\n\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\n\n\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n  baseEach(collection, function (value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;","import React, { Component } from 'react'\nimport { Grid, Table } from 'semantic-ui-react'\nimport './transactions.scss'\nimport axios from 'axios'\n\nclass Transactions extends Component {\n\n  constructor (props) {\n    super (props)\n    this.state = {\n      mobile: null,\n      success: null\n    }\n  }\n\n  componentDidMount () {\n    var mobile = this.state.mobile;\n    if (!mobile) {\n      const body = document.querySelector('.transactions-container').clientWidth\n      mobile = body <= 768 ? true : false\n      this.setState({\n        mobile: mobile\n      })\n    }\n    this.getTransactions()\n  }\n\n  getTransactions = () => {\n    return axios.get('/paystack-transactions').then(response => {\n      console.log(response)\n      const transactions = response.data.data.data\n\n      var success = [];\n\n      for (let i=0; i<transactions.length; i++) {\n        if(transactions[i].status === 'success') {\n          success.push(transactions[i])\n        }\n      }\n\n\n      console.log(success[0].metadata.custom_fields[0].first_name)\n\n      this.setState({\n        success\n      })\n    }).catch(error => {\n      console.log(error);\n    })\n  }\n\n  render () {\n\n    const { success, mobile } = this.state\n\n    console.log(this.state)\n    return (\n      <Grid className={'transactions-container'}>\n        \n        <Grid.Column width={16}>\n\n        {\n          success &&\n          \n          <Table>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>\n                  Paid At\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  Email\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  Reference\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  Amount\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  First Name\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  Last Name\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  Address\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  Description\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  Consultant\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {\n                success.map(transaction => (\n                  <Table.Row key={transaction.id}>\n                    <Table.Cell>\n                      {transaction.paid_at}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {transaction.customer.email}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {transaction.reference}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {transaction.currency}{transaction.amount}\n                    </Table.Cell>\n\n                    <Table.Cell>\n                      {transaction.metadata['custom_fields'] ? transaction.metadata['custom_fields'][0]['first_name'] : 'empty'}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {transaction.metadata['custom_fields'] ? transaction.metadata['custom_fields'][0]['last_name'] : 'empty'}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {transaction.metadata['custom_fields'] ? transaction.metadata['custom_fields'][0]['address'] : 'empty'}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {transaction.metadata['custom_fields'] ? transaction.metadata['custom_fields'][0]['description'] : 'empty'}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {transaction.metadata['custom_fields'] ? transaction.metadata['custom_fields'][0]['consultant'] : 'empty'}\n                    </Table.Cell>\n                    {/* {\n                      Object.keys(transaction.metadata.custom_fields).map(key => (\n                        <Table.Cell key={key}>\n                          {key}\n                        </Table.Cell>\n                      ))\n                    } */}\n                  </Table.Row>\n                ))\n              }\n            </Table.Body>\n          </Table>\n        }\n        </Grid.Column>\n\n      </Grid>\n    )\n  }\n}\n\nexport default Transactions\n"],"sourceRoot":""}